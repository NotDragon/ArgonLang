// Comprehensive test combining multiple features
using Point2D = struct { x: i32, y: i32 };

enum Status {
    Active,
    Inactive,
    Pending
}

class Calculator {
    pub def name: str;
    
    pub constructor(name: str) {
        this.name = name;
    }
    
    pub func add(a: i32, b: i32) i32 {
        return a + b;
    }
    
    pub func subtract(a: i32, b: i32) i32 {
        return a - b;
    }
}

func fibonacci(n: i32) i32 {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

func processPoint(p: Point2D) i32 {
    return p.x + p.y;
}

func main() i32 {
    // Basic variables
    def x: i32 = 10;
    def y: f64 = 3.14;
    def name: str = "Test";
    
    // Class usage
    def calc: Calculator = Calculator("MyCalc");
    def sum: i32 = calc.add(5, 3);
    def diff: i32 = calc.subtract(10, 4);
    
    // Struct usage
    def point: Point2D = struct { x = 5, y = 10 };
    def pointSum: i32 = processPoint(point);
    
    // Enum usage
    def status: Status = Status::Active;
    
    // Control flow
    for (i: i32 -> 1 to 5) {
        def fib: i32 = fibonacci(i);
    }
    
    // Conditionals
    if (sum > diff) {
        def result: i32 = sum * 2;
    }
    
    return sum + diff + pointSum;
}
