// Functional programming features
func processNumbers() vec<i32> {
    def numbers: vec<i32> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    
    // Filter even numbers
    def evens: vec<i32> = numbers | (x: i32) -> x % 2 == 0;
    
    // Map to squares
    def squares: vec<i32> = evens & (x: i32) -> x * x;
    
    // Reduce to sum
    def sum: i32 = squares ^ (acc: i32, x: i32) -> acc + x;
    
    return squares;
}

func pipelineExample() i32 {
    def result: i32 = [1, 2, 3, 4, 5]
        | (x: i32) -> x > 2
        & (x: i32) -> x * 2
        ^ (acc: i32, x: i32) -> acc + x;
    
    return result;
}

func lambdaExample() {
    def double: func(i32) i32 = (x: i32) -> x * 2;
    def add: func(i32, i32) i32 = (a: i32, b: i32) -> a + b;
    
    def numbers: vec<i32> = [1, 2, 3, 4, 5];
    def doubled: vec<i32> = numbers & double;
}

func main() i32 {
    def processed: vec<i32> = processNumbers();
    def pipeResult: i32 = pipelineExample();
    lambdaExample();
    
    return 0;
}
